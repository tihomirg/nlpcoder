1) Split a single scanner into 3 different:
  - for expressions
    - keep to levels of abstraction
    - variable binding is important as well. Associate variable name and the expression.
    - Think of including types at some places.
  - for types
    - Parent/Grandparent encoding
  - for the rest (code structure)
 
2) Encode as much as possible into expression trees:
   - method invocations
   - constructor invocations
   - array constructions
   - field access
   - etc.
   - TODO: Do this for "for statement", and the variables that appear inside, like "i"!
   
3) Build scopes and user definition collector to annotate the rules with the local variables, fields, and so on.
Potentially rule them out.

4) Remove state splitting in tokens.
  
5) Smooth and filter the irrelevant rules (with low frequency).
6) Build a scanner that measures a method frequency in number of projects.
7) Make declaration loader:
  - define declaration representation
  - types
  
8) Make a structure that indexes (connect) those declarations with words.
9) Make the top algorithm:
  - Takes the terminals and words of the declarations to find the appropriate ones
  - Takes the position of the word in the source and the target (i.e., partial expression)
  - Variation of EM algorithm
10) Scan jar files.
  - grepcode.com
  - reflection
  - method usage statistics from projects and in total (compare those two)
  - use rules, i.e. all simple names that were collected to rule out a bunch of methods.
  - use scopes to find user defind (local) declarations.
  - insert those method informations back in rules (types and so on)
  
11) Scan source code and coments from greapcode.com
  - here we can find even 
  - in Java api doc, it seems that a first sentence is the most relevant, and reflects what the method do.
  
 