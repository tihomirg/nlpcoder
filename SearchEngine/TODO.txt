1) Think about WordNet, and what related words indeed to use. For some tokens, that are literals or locals we do not need related words.
2) Manually: What about lemmatization of "println" --> "print new line" //we should get this from the JavaDoc
3) Same holds for "int" -> "integer", "bool" -> "boolean" and so on. We should make our own list.
4) Include JavaDoc.
5) Declaration frequencies

6) Remaining make trouble. Obviously we need to think in terms of groups of words in declaration. Also use sets where needed.
For instance: if a declaration has [name words]:[remaining words]:[receiver words] => [multiset]:[multiset]:[singleton set]

7) Technique that maximizes the hit. Given words that hit a declaration we try to maximize the hit. i.e. cover as many distinct positions in the declaration.
The most important is the name. Others must not multiply, especially, remaining receiver words.

Again we need groups. Now we can introduce scorers for hits (1,1), (2,2), (1,2), (2,1)....bases should be maximize hit tactics.
This means if one word has an option to hit many places it takes into account the other hits and together they maximize the hit.
Also, we need to take into account places, and missed places as well. Two args with the same type shouldn't be hit two times by one word.
Only the one that brings more "points" will be hit. The other one needs to wait for more words to come. We get points based on the
declaration structure not based on the word hit. JavaDoc can be used for main group, name hit.

8) Word importance measured in calculus. For instance if f("file") > f("input") this means that those that we select with "input" will have more importance than
those selected with "file"

9) Simple max algorithm:
    - sort slots by importance
    - check if the declaration slot is free
    - if yes, occupy the slot
    - if not, check if it can bring higher score than the current.
    - if yes, substitute and continue wit the substitute (in substitutes direction)
    - if not, continue it the current direction 

Done:

1) Do word lemmatization. //Still see if we need WordNet lemmatizer/steammer.
2) Unique declarations
3) Keep receiver tokens separated.
4) Connect and test.
5) Build word selection groups.
6) Implement missing methods in selection.
7) Clean selection table after you print/copy top statistics.